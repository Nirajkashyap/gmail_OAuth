import cgi
import os
import logging
import sys
import string
from cgi import parse_qs, parse_qsl
from os import path

import urllib
import urllib2
import base64


from optparse import OptionParser
import smtplib
import imaplib

from cgi import parse_qs, parse_qsl
from os import path

import ssl
import socket

from google.appengine.api import urlfetch

#from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app
from google.appengine.ext.webapp import template

try:
	from django.utils import simplejson as json
except :
	import json

import webapp2 as webapp	

GOOGLE_ACCOUNTS_BASE_URL = 'https://accounts.google.com'
REDIRECT_URI = 'https://imapg83.appspot.com/grantblank/'


def AccountsUrl(command):
  """Generates the Google Accounts URL.

  Args:
    command: The command to execute.

  Returns:
    A URL for the given command.
  """
  return '%s/%s' % (GOOGLE_ACCOUNTS_BASE_URL, command)


def AuthorizeTokens(authorization_code):
  """Obtains OAuth access token and refresh token.

  This uses the application portion of the "OAuth2 for Installed Applications"
  flow at https://developers.google.com/accounts/docs/OAuth2InstalledApp#handlingtheresponse

  Args:
    client_id: Client ID obtained by registering your app.
    client_secret: Client secret obtained by registering your app.
    authorization_code: code generated by Google Accounts after user grants
        permission.
  Returns:
    The decoded response from the Google Accounts server, as a dict. Expected
    fields include 'access_token', 'expires_in', and 'refresh_token'.
  """
  params = {}
  params['client_id'] = 'my client key'
  params['client_secret'] = 'my secrect key'
  params['code'] = authorization_code
  params['redirect_uri'] = REDIRECT_URI
  params['grant_type'] = 'authorization_code'
  request_url = AccountsUrl('o/oauth2/token')

  response = urllib.urlopen(request_url, urllib.urlencode(params)).read()
  return json.loads(response)


def GenerateOAuth2String(username, access_token, base64_encode=True):
  """Generates an IMAP OAuth2 authentication string.

  See https://developers.google.com/google-apps/gmail/oauth2_overview

  Args:
    username: the username (email address) of the account to authenticate
    access_token: An OAuth2 access token.
    base64_encode: Whether to base64-encode the output.

  Returns:
    The SASL argument for the OAuth2 mechanism.
  """
  print '<br> <br> in stiring <br>'
  
  auth_string = 'user=%s\1auth=Bearer %s\1\1' % (username, access_token)
  if base64_encode:
    auth_string = base64.b64encode(auth_string)
  return auth_string


def TestImapAuthentication(auth_string):
  """Authenticates to IMAP with the given auth_string.

  Prints a debug trace of the attempted IMAP connection.

  Args:
    user: The Gmail username (full email address)
    auth_string: A valid OAuth2 string, as returned by GenerateOAuth2String.
        Must not be base64-encoded, since imaplib does its own base64-encoding.
  """
  print 'in test'
  print
  imap_conn = imaplib.IMAP4_SSL("imap.gmail.com", 993)
  imap_conn.debug = 4
  imap_conn.authenticate('XOAUTH2', lambda x: auth_string)
  imap_conn.select('INBOX')

def TestSmtpAuthentication(auth_string):
  """Authenticates to SMTP with the given auth_string.

  Args:
    user: The Gmail username (full email address)
    auth_string: A valid OAuth2 string, not base64-encoded, as returned by
        GenerateOAuth2String.
  """
  print
  smtp_conn = smtplib.SMTP('smtp.gmail.com', 587)
  smtp_conn.set_debuglevel(True)
  smtp_conn.ehlo('test')
  smtp_conn.starttls()
  smtp_conn.docmd('AUTH', 'XOAUTH2 ' + base64.b64encode(auth_string))  

class code(webapp.RequestHandler):
	def get(self):
			
			print 'from my html page'
			form = cgi.FieldStorage()
										
			code = form["code"]
			state = form["state"]
			
			state2 = str (state.value)		
			code2 = str (code.value) 
			print code2
			
			
			response = AuthorizeTokens(code2)  
			
			print '<br> token is: <br>'
			print response['access_token']
			
			print GenerateOAuth2String('xyz@gmail.com', response['access_token'],base64_encode=False)
			
			################### error code ###############################################
			#          imap_conn = imaplib.IMAP4_SSL("imap.gmail.com", 993)              #
			############################################################################## 
			
			TestImapAuthentication(GenerateOAuth2String('', response['access_token'],base64_encode=False))
			
			
class imaptest(webapp.RequestHandler):
		def get(self):
			
			print 'in test'
			
			imap_conn = imaplib.IMAP4_SSL("imap.gmail.com",993)
			imap_conn.debug = 4
			print 'connnected'
			
class grantblank(webapp.RequestHandler):
		def get(self):
			self.post()
		
		def post(self):	
			print 'hi'

class MainHandler(webapp.RequestHandler):
   
		def get(self):
			self.post()
		
		def post(self):	
			#print 'hi'
			mydict = { 'per' : 'https://accounts.google.com/o/oauth2/auth?scope=https://www.googleapis.com/auth/mail&redirect_uri=http://localhost:14085/upload&response_type=code&client_id=796072013304-2f2ph9k8vjj46t95nk7lp9goqs9niute.apps.googleusercontent.com&access_type=offline&approval_prompt=force&state=/drive'} 
			path = os.path.join(os.path.dirname(__file__), 'grantfinal.html')
			self.response.out.write(template.render(path, mydict))

app = webapp.WSGIApplication([
    ('/', MainHandler),('/grantblank/', grantblank), ('/finalupload',code),('/imaptest', imaptest)
], debug=True)

def main():
  """Main entry point for executing a request with this handler."""
  run_wsgi_app(app)

if __name__ == "__main__":
    main()